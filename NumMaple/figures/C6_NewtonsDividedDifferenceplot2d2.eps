%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 20 118 575 673
%%Creator: FreeHEP Graphics2D Driver
%%Producer: com.maplesoft.mathdoc.view.plot.paint.PlotPSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: 2016年8月19日 13時21分48秒 JST
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Draw a line. (x0 y0 x1 y1 line)
/L {bias n m l S unbias} def

% Polyline primitive.
/polyline  {n m 1 exch 1 exch
           {pop currentfile token pop currentfile token pop l} for
           } def

% Draw a polyline (n x0 y0 OPL x1 y1 x2 y2 ... ... xn yn)
/OPL {bias polyline S unbias} def

% Draw a closed polyline (n x0 y0 CPL x1 y1 x2 y2 ... ... xn yn)
/CPL {bias polyline s unbias} def

% Draw a filled polyline (n x0 y0 FPL x1 y1 x2 y2 ... ... xn yn)
/FPL {polyline h f*} def

% Draw an oval. (x y w h OVL)
/OVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width currentlinewidth sub 2 div
      height currentlinewidth sub 2 div neg
      scale n 0 0 1 5 -2 roll arc
      smatrix setmatrix S} def

% Draw a filled oval. (x y w h FOVL)
/FOVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width 2 div
      height 2 div neg
      scale n 0 0 m 0 0 1 5 -2 roll arc
      h smatrix setmatrix f} def

% Draw a rounded rectangle. (x y w h arcwidth archeight RREC)
/RREC {matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      s} def

% Draw a filled rounded rectangle. (x y w h arcwidth archeight FRREC)
/FRREC{matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      h f} def

% Draw a string.  (string x y STR)
/STR {q m 1 -1 scale recshow Q} def

% Define basic plot symbols.
/xys   {/siz exch def /yv exch def /xv exch def} def
/hline {xys n xv siz 2. div sub yv m siz 0 rlineto S} def
/vline {xys n xv yv siz 2. div sub m 0 siz rlineto S} def
/plus  {xys n xv yv siz 2. div sub m 0 siz rlineto
                    xv siz 2. div sub yv m siz 0 rlineto S} def
/dot   {n 2. div 0 360 arc s} def
/fdot  {n 2. div 0 360 arc h f} def
/box   {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                    siz 2 sqrt div dup rs} def
/fbox  {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                       siz 2 sqrt div dup rf} def
/tridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto s} def
/ftridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto h f} def

% Symbols defined in terms of the others.
/star     {3 copy cross plus} def
/cross    {xys q xv yv translate 45 rotate 0 0 siz plus Q} def
/diamond  {xys q xv yv translate 45 rotate 0 0 siz box Q} def
/fdiamond {xys q xv yv translate 45 rotate 0 0 siz fbox Q} def
/triup    {xys q xv yv translate 180 rotate 0 0 siz tridn Q} def
/ftriup   {xys q xv yv translate 180 rotate 0 0 siz ftridn Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Helvetica 16#00 vg&newcompositefont
/DialogInput-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
595 791 setpagesize
20 20 20 20 setmargins
0 0 setorigin
248 248 setsize
fittopage
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0 0 0 RG
[ 1.00000 0 0 1.00000 0 0 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0 0 m
248.000 0 l
248.000 248.000 l
0 248.000 l
0 0 l
h
f
0 0 0 RG
1.50000 w
0 J
1 j
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
0 0 248 248 rc
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
cliprestore
q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
0 0 238 238 rc
1.00000 w
2 J
0 j
0 J
1 j
q
Q
2 J
0 j
0 J
1 j
q
Q
2 J
0 j
1.50000 w
0 J
1 j
q
q
1.00000 w
2 J
0 j
[ 1.00000 0 0 1.00000 163.498 7.49598 ] concat
newpath
0 1.00000 m
1.00000 0 l
2.00000 1.00000 l
1.00000 2.00000 l
h
S
[ 1.00000 0 0 1.00000 -163.498 -7.49598 ] concat
[ 1.00000 0 0 1.00000 230.497 227.000 ] concat
newpath
0 1.00000 m
1.00000 0 l
2.00000 1.00000 l
1.00000 2.00000 l
h
S
[ 1.00000 0 0 1.00000 -230.497 -227.000 ] concat
[ 1.00000 0 0 1.00000 96.4992 51.3967 ] concat
newpath
0 1.00000 m
1.00000 0 l
2.00000 1.00000 l
1.00000 2.00000 l
h
S
[ 1.00000 0 0 1.00000 -96.4992 -51.3967 ] concat
[ 1.00000 0 0 1.00000 29.5000 95.2975 ] concat
newpath
0 1.00000 m
1.00000 0 l
2.00000 1.00000 l
1.00000 2.00000 l
h
S
[ 1.00000 0 0 1.00000 -29.5000 -95.2975 ] concat
Q
q
0 0 1.00000 RG
30.0000 3.10987 203.997 226.390 rc
newpath
31.0000 96.7975 m
32.0567 95.4236 l
32.9762 94.2459 l
34.0103 92.9412 l
35.0512 91.6490 l
36.0871 90.3839 l
37.0476 89.2298 l
38.0421 88.0539 l
39.0707 86.8580 l
40.0959 85.6866 l
41.1505 84.5031 l
42.0793 83.4787 l
43.1250 82.3456 l
44.1750 81.2294 l
45.1869 80.1742 l
46.1057 79.2333 l
47.1983 78.1359 l
48.1239 77.2246 l
49.2006 76.1856 l
50.1536 75.2848 l
51.1993 74.3169 l
52.1949 73.4152 l
53.2338 72.4949 l
54.1879 71.6685 l
55.2169 70.7970 l
56.2858 69.9137 l
57.2163 69.1630 l
58.2213 68.3712 l
59.2595 67.5740 l
60.2752 66.8145 l
61.2579 66.0988 l
62.3490 65.3263 l
63.3295 64.6520 l
64.3763 63.9529 l
65.3249 63.3378 l
66.3619 62.6855 l
67.3377 62.0910 l
68.3577 61.4895 l
69.3549 60.9210 l
70.3989 60.3468 l
71.4044 59.8138 l
72.4327 59.2893 l
73.4524 58.7895 l
74.3895 58.3482 l
75.4634 57.8635 l
76.4240 57.4492 l
77.4481 57.0272 l
78.4284 56.6426 l
79.5168 56.2375 l
80.4593 55.9055 l
81.5291 55.5497 l
82.5040 55.2449 l
83.5705 54.9328 l
84.4907 54.6814 l
85.5386 54.4152 l
86.5509 54.1785 l
87.5625 53.9620 l
88.5705 53.7662 l
89.5387 53.5968 l
90.5855 53.4343 l
91.5831 53.2993 l
92.6330 53.1784 l
93.5835 53.0874 l
94.6339 53.0075 l
95.6400 52.9512 l
96.6437 52.9147 l
97.6921 52.8977 l
98.6576 52.9010 l
99.6465 52.9233 l
100.738 52.9701 l
101.726 53.0326 l
102.737 53.1163 l
103.766 53.2220 l
104.711 53.3373 l
105.718 53.4795 l
106.718 53.6402 l
107.787 53.8338 l
108.731 54.0232 l
109.820 54.2634 l
110.802 54.5000 l
111.775 54.7527 l
112.820 55.0451 l
113.870 55.3602 l
114.825 55.6656 l
115.839 56.0095 l
116.829 56.3644 l
117.902 56.7709 l
118.830 57.1407 l
119.897 57.5863 l
120.899 58.0255 l
121.892 58.4798 l
122.885 58.9537 l
123.898 59.4570 l
124.973 60.0124 l
125.957 60.5415 l
126.929 61.0824 l
127.969 61.6810 l
129.006 62.2994 l
129.936 62.8723 l
131.039 63.5729 l
131.961 64.1774 l
133.040 64.9056 l
134.070 65.6218 l
134.990 66.2788 l
136.024 67.0374 l
137.065 67.8222 l
138.101 68.6243 l
139.061 69.3867 l
140.056 70.1952 l
141.084 71.0516 l
142.109 71.9259 l
143.164 72.8466 l
144.093 73.6756 l
145.138 74.6291 l
146.188 75.6080 l
147.200 76.5718 l
148.119 77.4643 l
149.212 78.5471 l
150.137 79.4827 l
151.214 80.5920 l
152.167 81.5929 l
153.213 82.7115 l
154.208 83.7965 l
155.247 84.9493 l
156.201 86.0265 l
157.230 87.2083 l
158.299 88.4579 l
159.230 89.5638 l
160.235 90.7773 l
161.273 92.0517 l
162.289 93.3188 l
163.271 94.5640 l
164.362 95.9687 l
165.343 97.2508 l
166.390 98.6404 l
167.338 99.9182 l
168.375 101.335 l
169.351 102.687 l
170.371 104.121 l
171.368 105.542 l
172.412 107.051 l
173.418 108.525 l
174.446 110.052 l
175.466 111.587 l
176.403 113.015 l
177.477 114.674 l
178.437 116.176 l
179.462 117.797 l
180.442 119.369 l
181.530 121.136 l
182.473 122.684 l
183.543 124.463 l
184.517 126.104 l
185.584 127.919 l
186.504 129.504 l
187.552 131.329 l
188.564 133.112 l
189.576 134.914 l
190.584 136.730 l
191.552 138.492 l
192.599 140.418 l
193.597 142.274 l
194.646 144.248 l
195.597 146.054 l
196.647 148.070 l
197.653 150.021 l
198.657 151.987 l
199.705 154.062 l
200.671 155.992 l
201.660 157.987 l
202.752 160.213 l
203.740 162.248 l
204.751 164.349 l
205.779 166.506 l
206.725 168.507 l
207.732 170.659 l
208.732 172.815 l
209.801 175.142 l
210.745 177.215 l
211.834 179.628 l
212.816 181.825 l
213.789 184.018 l
214.834 186.396 l
215.884 188.806 l
216.839 191.017 l
217.853 193.385 l
218.843 195.715 l
219.916 198.262 l
220.844 200.484 l
221.910 203.058 l
222.913 205.497 l
223.905 207.932 l
224.899 210.388 l
225.912 212.913 l
226.986 215.612 l
227.971 218.106 l
228.943 220.587 l
229.983 223.259 l
231.019 225.946 l
231.997 228.500 l
S
cliprestore
newpath
0 0 m
0 238.000 l
238.000 238.000 l
238.000 0 l
h
W
Q
q
30.0000 3.10987 203.997 226.390 rc
0.470588 0 0.0549020 RG
newpath
31.0000 96.7975 m
32.0567 97.4574 l
32.9762 97.9790 l
34.0103 98.5081 l
35.0512 98.9803 l
36.0871 99.3908 l
37.0476 99.7195 l
38.0421 100.007 l
39.0707 100.251 l
40.0959 100.440 l
41.1505 100.578 l
42.0793 100.654 l
43.1250 100.689 l
44.1750 100.671 l
45.1869 100.605 l
46.1057 100.503 l
47.1983 100.333 l
48.1239 100.147 l
49.2006 99.8843 l
50.1536 99.6100 l
51.1993 99.2651 l
52.1949 98.8951 l
53.2338 98.4666 l
54.1879 98.0359 l
55.2169 97.5321 l
56.2858 96.9668 l
57.2163 96.4408 l
58.2213 95.8378 l
59.2595 95.1780 l
60.2752 94.4972 l
61.2579 93.8059 l
62.3490 93.0020 l
63.3295 92.2480 l
64.3763 91.4107 l
65.3249 90.6240 l
66.3619 89.7346 l
67.3377 88.8705 l
68.3577 87.9399 l
69.3549 87.0040 l
70.3989 85.9975 l
71.4044 85.0031 l
72.4327 83.9619 l
73.4524 82.9060 l
74.3895 81.9159 l
75.4634 80.7589 l
76.4240 79.7048 l
77.4481 78.5616 l
78.4284 77.4498 l
79.5168 76.1960 l
80.4593 75.0948 l
81.5291 73.8284 l
82.5040 72.6598 l
83.5705 71.3668 l
84.4907 70.2396 l
85.5386 68.9437 l
86.5509 67.6805 l
87.5625 66.4078 l
88.5705 65.1306 l
89.5387 63.8956 l
90.5855 62.5528 l
91.5831 61.2664 l
92.6330 59.9064 l
93.5835 58.6709 l
94.6339 57.3013 l
95.6400 55.9864 l
96.6437 54.6727 l
97.6921 53.2992 l
98.6576 52.0339 l
99.6465 50.7386 l
100.738 49.3101 l
101.726 48.0192 l
102.737 46.7022 l
103.766 45.3673 l
104.711 44.1450 l
105.718 42.8478 l
106.718 41.5672 l
107.787 40.2059 l
108.731 39.0127 l
109.820 37.6465 l
110.802 36.4241 l
111.775 35.2252 l
112.820 33.9488 l
113.870 32.6815 l
114.825 31.5417 l
115.839 30.3460 l
116.829 29.1946 l
117.902 27.9648 l
118.830 26.9168 l
119.897 25.7326 l
120.899 24.6393 l
121.892 23.5764 l
122.885 22.5333 l
123.898 21.4915 l
124.973 20.4127 l
125.957 19.4475 l
126.929 18.5180 l
127.969 17.5509 l
129.006 16.6141 l
129.936 15.7981 l
131.039 14.8630 l
131.961 14.1075 l
133.040 13.2560 l
134.070 12.4766 l
134.990 11.8090 l
136.024 11.0910 l
137.065 10.4041 l
138.101 9.75744 l
139.061 9.19146 l
140.056 8.64042 l
141.084 8.10885 l
142.109 7.61871 l
143.164 7.15692 l
144.093 6.78657 l
145.138 6.41137 l
146.188 6.08006 l
147.200 5.80477 l
148.119 5.59300 l
149.212 5.38948 l
150.137 5.25891 l
151.214 5.15629 l
152.167 5.11051 l
153.213 5.10987 l
154.208 5.15840 l
155.247 5.26107 l
156.201 5.40301 l
157.230 5.60812 l
158.299 5.87937 l
159.230 6.16459 l
160.235 6.52479 l
161.273 6.95475 l
162.289 7.43316 l
163.271 7.95134 l
164.362 8.59140 l
165.343 9.22552 l
166.390 9.96517 l
167.338 10.6920 l
168.375 11.5493 l
169.351 12.4164 l
170.371 13.3864 l
171.368 14.3985 l
172.412 15.5266 l
173.418 16.6802 l
174.446 17.9290 l
175.466 19.2374 l
176.403 20.5018 l
177.477 22.0252 l
178.437 23.4557 l
179.462 25.0526 l
180.442 26.6510 l
181.530 28.5072 l
182.473 30.1846 l
183.543 32.1680 l
184.517 34.0504 l
185.584 36.1919 l
186.504 38.1097 l
187.552 40.3739 l
188.564 42.6427 l
189.576 44.9913 l
190.584 47.4128 l
191.552 49.8168 l
192.599 52.5019 l
193.597 55.1455 l
194.646 58.0178 l
195.597 60.6984 l
196.647 63.7507 l
197.653 66.7637 l
198.657 69.8575 l
199.705 73.1837 l
200.671 76.3338 l
201.660 79.6469 l
202.752 83.4081 l
203.740 86.9079 l
204.751 90.5807 l
205.779 94.4139 l
206.725 98.0253 l
207.732 101.968 l
208.732 105.978 l
209.801 110.374 l
210.745 114.347 l
211.834 119.040 l
212.816 123.377 l
213.789 127.763 l
214.834 132.586 l
215.884 137.542 l
216.839 142.150 l
217.853 147.147 l
218.843 152.128 l
219.916 157.644 l
220.844 162.517 l
221.910 168.227 l
222.913 173.708 l
223.905 179.244 l
224.899 184.894 l
225.912 190.769 l
226.986 197.122 l
227.971 203.061 l
228.943 209.033 l
229.983 215.536 l
231.019 222.149 l
231.997 228.500 l
S
cliprestore
newpath
0 0 m
0 238.000 l
238.000 238.000 l
238.000 0 l
h
W
Q
Q
q
1.00000 w
2 J
0 j
q
0 J
1 j
newpath
31.0000 141.000 m
231.997 141.000 l
S
Q
0 J
1 j
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
124 161 14 17 rc
newpath
130.600 168.371 m
130.839 168.625 131.020 168.879 131.142 169.133  c
131.230 169.309 131.374 169.770 131.574 170.517  c
132.218 169.550 l
132.389 169.316 132.597 169.093 132.841 168.880  c
133.085 168.668 133.300 168.522 133.485 168.444  c
133.603 168.396 133.732 168.371 133.874 168.371  c
134.084 168.371 134.251 168.427 134.375 168.540  c
134.500 168.652 134.562 168.789 134.562 168.950  c
134.562 169.135 134.525 169.262 134.452 169.331  c
134.315 169.453 134.159 169.514 133.983 169.514  c
133.881 169.514 133.771 169.492 133.654 169.448  c
133.424 169.370 133.271 169.331 133.192 169.331  c
133.075 169.331 132.936 169.399 132.775 169.536  c
132.472 169.790 132.111 170.280 131.691 171.008  c
132.292 173.527 l
132.384 173.913 132.462 174.144 132.526 174.220  c
132.589 174.295 132.653 174.333 132.716 174.333  c
132.819 174.333 132.939 174.277 133.075 174.165  c
133.344 173.940 133.573 173.647 133.764 173.286  c
134.020 173.418 l
133.712 173.994 133.322 174.472 132.848 174.853  c
132.580 175.068 132.353 175.175 132.167 175.175  c
131.894 175.175 131.676 175.022 131.515 174.714  c
131.413 174.523 131.200 173.703 130.878 172.253  c
130.116 173.576 129.506 174.428 129.047 174.809  c
128.749 175.053 128.461 175.175 128.183 175.175  c
127.987 175.175 127.809 175.105 127.648 174.963  c
127.531 174.856 127.472 174.711 127.472 174.531  c
127.472 174.370 127.526 174.235 127.633 174.128  c
127.741 174.021 127.873 173.967 128.029 173.967  c
128.185 173.967 128.351 174.045 128.527 174.201  c
128.654 174.314 128.752 174.370 128.820 174.370  c
128.878 174.370 128.954 174.331 129.047 174.252  c
129.276 174.067 129.589 173.667 129.984 173.051  c
130.380 172.436 130.639 171.992 130.761 171.718  c
130.458 170.532 130.294 169.904 130.270 169.836  c
130.158 169.519 130.011 169.294 129.831 169.162  c
129.650 169.030 129.384 168.964 129.032 168.964  c
128.920 168.964 128.791 168.969 128.644 168.979  c
128.644 168.715 l
h
f
Q
cliprestore
newpath
0 0 m
0 238.000 l
238.000 238.000 l
238.000 0 l
h
W
Q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0 0 1.00000 0 0 ] concat
q
q
0 w
newpath
31.0000 141.000 m
31.0000 143.000 l
S
Q
q
0 w
newpath
98.0000 141.000 m
98.0000 143.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
100.757 153.042 m
103.174 151.863 l
103.416 151.863 l
103.416 160.249 l
103.416 160.806 103.439 161.152 103.486 161.289  c
103.532 161.426 103.628 161.531 103.775 161.604  c
103.921 161.677 104.219 161.719 104.668 161.729  c
104.668 162.000 l
100.933 162.000 l
100.933 161.729 l
101.402 161.719 101.705 161.679 101.841 161.608  c
101.978 161.537 102.073 161.442 102.127 161.322  c
102.181 161.202 102.208 160.845 102.208 160.249  c
102.208 154.888 l
102.208 154.165 102.183 153.701 102.134 153.496  c
102.100 153.340 102.038 153.225 101.948 153.152  c
101.857 153.079 101.749 153.042 101.622 153.042  c
101.441 153.042 101.189 153.118 100.867 153.269  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
165.000 141.000 m
165.000 143.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
172.877 160.088 m
172.181 162.000 l
166.322 162.000 l
166.322 161.729 l
168.045 160.156 169.259 158.872 169.962 157.876  c
170.665 156.880 171.017 155.969 171.017 155.144  c
171.017 154.514 170.824 153.997 170.438 153.591  c
170.052 153.186 169.591 152.983 169.054 152.983  c
168.565 152.983 168.127 153.126 167.739 153.412  c
167.351 153.698 167.064 154.116 166.878 154.668  c
166.607 154.668 l
166.730 153.765 167.043 153.071 167.549 152.588  c
168.054 152.105 168.685 151.863 169.442 151.863  c
170.248 151.863 170.920 152.122 171.460 152.639  c
171.999 153.157 172.269 153.767 172.269 154.470  c
172.269 154.973 172.152 155.476 171.918 155.979  c
171.556 156.770 170.970 157.607 170.160 158.491  c
168.944 159.819 168.185 160.620 167.882 160.894  c
170.475 160.894 l
171.002 160.894 171.372 160.874 171.584 160.835  c
171.797 160.796 171.988 160.717 172.159 160.597  c
172.330 160.477 172.479 160.308 172.606 160.088  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
232.000 141.000 m
232.000 143.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
233.761 153.958 m
234.044 153.289 234.402 152.772 234.834 152.408  c
235.266 152.045 235.805 151.863 236.449 151.863  c
237.245 151.863 237.856 152.122 238.280 152.639  c
238.603 153.025 238.764 153.438 238.764 153.877  c
238.764 154.600 238.310 155.347 237.401 156.118  c
238.012 156.357 238.473 156.699 238.786 157.144  c
239.098 157.588 239.254 158.110 239.254 158.711  c
239.254 159.570 238.981 160.315 238.434 160.945  c
237.721 161.765 236.689 162.175 235.336 162.175  c
234.667 162.175 234.212 162.092 233.970 161.926  c
233.728 161.760 233.607 161.582 233.607 161.392  c
233.607 161.250 233.665 161.126 233.780 161.018  c
233.894 160.911 234.032 160.857 234.193 160.857  c
234.315 160.857 234.440 160.877 234.567 160.916  c
234.650 160.940 234.838 161.029 235.131 161.183  c
235.424 161.337 235.627 161.428 235.739 161.458  c
235.919 161.511 236.112 161.538 236.317 161.538  c
236.815 161.538 237.249 161.345 237.617 160.960  c
237.986 160.574 238.170 160.117 238.170 159.590  c
238.170 159.204 238.085 158.828 237.914 158.462  c
237.787 158.189 237.648 157.981 237.497 157.839  c
237.287 157.644 236.999 157.467 236.632 157.308  c
236.266 157.150 235.893 157.070 235.512 157.070  c
235.277 157.070 l
235.277 156.851 l
235.663 156.802 236.050 156.663 236.438 156.433  c
236.826 156.204 237.108 155.928 237.284 155.606  c
237.460 155.283 237.548 154.929 237.548 154.543  c
237.548 154.041 237.390 153.634 237.075 153.324  c
236.761 153.014 236.369 152.859 235.900 152.859  c
235.143 152.859 234.511 153.264 234.003 154.075  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
64.0000 141.000 m
64.0000 142.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
131.000 141.000 m
131.000 142.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
198.000 141.000 m
198.000 142.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
Q
2 J
0 j
q
0 J
1 j
newpath
31.0000 228.500 m
31.0000 5.10987 l
S
Q
0 J
1 j
[ 1.00000 0 0 1.00000 0 0 ] concat
q
[ 1.00000 0 0 1.00000 0 0 ] concat
q
0 64 8 17 rc
Q
cliprestore
newpath
0 0 m
0 238.000 l
238.000 238.000 l
238.000 0 l
h
W
Q
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0 0 1.00000 0 0 ] concat
q
q
0 w
newpath
31.0000 229.000 m
29.0000 229.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
q
15 226 8 16 rc
newpath
27.4531 234.890 m
17.5468 234.890 l
17.5468 234.109 l
27.4531 234.109 l
27.4531 234.890 l
h
f
Q
newpath
31.8774 237.088 m
31.1816 239.000 l
25.3222 239.000 l
25.3222 238.729 l
27.0459 237.156 28.2592 235.872 28.9624 234.876  c
29.6655 233.880 30.0170 232.969 30.0170 232.144  c
30.0170 231.514 29.8242 230.997 29.4384 230.591  c
29.0527 230.186 28.5913 229.983 28.0542 229.983  c
27.5659 229.983 27.1276 230.126 26.7395 230.412  c
26.3513 230.698 26.0644 231.116 25.8789 231.668  c
25.6079 231.668 l
25.7299 230.765 26.0437 230.071 26.5490 229.588  c
27.0544 229.105 27.6855 228.863 28.4423 228.863  c
29.2480 228.863 29.9206 229.122 30.4602 229.639  c
30.9997 230.157 31.2695 230.767 31.2695 231.470  c
31.2695 231.973 31.1523 232.476 30.9179 232.979  c
30.5566 233.770 29.9707 234.607 29.1601 235.491  c
27.9443 236.819 27.1850 237.620 26.8823 237.894  c
29.4751 237.894 l
30.0024 237.894 30.3723 237.874 30.5847 237.835  c
30.7971 237.796 30.9887 237.717 31.1596 237.597  c
31.3305 237.477 31.4794 237.308 31.6064 237.088  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
31.0000 185.000 m
29.0000 185.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
q
15 182 8 16 rc
newpath
27.4531 190.890 m
17.5468 190.890 l
17.5468 190.109 l
27.4531 190.109 l
27.4531 190.890 l
h
f
Q
newpath
26.7578 186.042 m
29.1748 184.863 l
29.4165 184.863 l
29.4165 193.249 l
29.4165 193.806 29.4397 194.152 29.4860 194.289  c
29.5324 194.426 29.6289 194.531 29.7753 194.604  c
29.9218 194.677 30.2197 194.719 30.6689 194.729  c
30.6689 195.000 l
26.9335 195.000 l
26.9335 194.729 l
27.4023 194.719 27.7050 194.679 27.8418 194.608  c
27.9785 194.537 28.0737 194.442 28.1274 194.322  c
28.1811 194.202 28.2080 193.845 28.2080 193.249  c
28.2080 187.888 l
28.2080 187.165 28.1835 186.701 28.1347 186.496  c
28.1005 186.340 28.0383 186.225 27.9480 186.152  c
27.8576 186.079 27.7490 186.042 27.6220 186.042  c
27.4414 186.042 27.1899 186.118 26.8676 186.269  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
31.0000 141.000 m
29.0000 141.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
25.5419 146.092 m
25.5419 144.960 25.7128 143.984 26.0546 143.166  c
26.3964 142.348 26.8505 141.739 27.4169 141.339  c
27.8564 141.022 28.3105 140.863 28.7793 140.863  c
29.5410 140.863 30.2246 141.251 30.8300 142.027  c
31.5869 142.989 31.9653 144.293 31.9653 145.939  c
31.9653 147.091 31.7993 148.070 31.4672 148.876  c
31.1352 149.681 30.7116 150.266 30.1965 150.630  c
29.6814 150.993 29.1845 151.175 28.7060 151.175  c
27.7587 151.175 26.9702 150.616 26.3403 149.498  c
25.8081 148.556 25.5419 147.420 25.5419 146.092  c
h
26.9775 146.275 m
26.9775 147.643 27.1460 148.758 27.4829 149.623  c
27.7612 150.350 28.1762 150.714 28.7280 150.714  c
28.9917 150.714 29.2651 150.595 29.5483 150.359  c
29.8315 150.122 30.0463 149.725 30.1928 149.168  c
30.4174 148.329 30.5297 147.145 30.5297 145.616  c
30.5297 144.483 30.4126 143.539 30.1782 142.782  c
30.0024 142.220 29.7753 141.822 29.4970 141.588  c
29.2968 141.427 29.0551 141.346 28.7719 141.346  c
28.4399 141.346 28.1445 141.495 27.8857 141.793  c
27.5341 142.198 27.2949 142.835 27.1679 143.705  c
27.0410 144.574 26.9775 145.431 26.9775 146.275  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
31.0000 97.0000 m
29.0000 97.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
26.7578 98.0424 m
29.1748 96.8632 l
29.4165 96.8632 l
29.4165 105.249 l
29.4165 105.806 29.4397 106.152 29.4860 106.289  c
29.5324 106.426 29.6289 106.531 29.7753 106.604  c
29.9218 106.677 30.2197 106.719 30.6689 106.729  c
30.6689 107.000 l
26.9335 107.000 l
26.9335 106.729 l
27.4023 106.719 27.7050 106.679 27.8418 106.608  c
27.9785 106.537 28.0737 106.442 28.1274 106.322  c
28.1811 106.202 28.2080 105.845 28.2080 105.249  c
28.2080 99.8881 l
28.2080 99.1655 28.1835 98.7016 28.1347 98.4965  c
28.1005 98.3403 28.0383 98.2255 27.9480 98.1523  c
27.8576 98.0791 27.7490 98.0424 27.6220 98.0424  c
27.4414 98.0424 27.1899 98.1181 26.8676 98.2695  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
31.0000 53.0000 m
29.0000 53.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
31.8774 61.0883 m
31.1816 63.0000 l
25.3222 63.0000 l
25.3222 62.7290 l
27.0459 61.1567 28.2592 59.8725 28.9624 58.8764  c
29.6655 57.8803 30.0170 56.9697 30.0170 56.1445  c
30.0170 55.5146 29.8242 54.9970 29.4384 54.5918  c
29.0527 54.1865 28.5913 53.9838 28.0542 53.9838  c
27.5659 53.9838 27.1276 54.1267 26.7395 54.4123  c
26.3513 54.6980 26.0644 55.1167 25.8789 55.6684  c
25.6079 55.6684 l
25.7299 54.7651 26.0437 54.0717 26.5490 53.5883  c
27.0544 53.1049 27.6855 52.8632 28.4423 52.8632  c
29.2480 52.8632 29.9206 53.1220 30.4602 53.6396  c
30.9997 54.1572 31.2695 54.7675 31.2695 55.4707  c
31.2695 55.9736 31.1523 56.4765 30.9179 56.9794  c
30.5566 57.7705 29.9707 58.6079 29.1601 59.4917  c
27.9443 60.8198 27.1850 61.6206 26.8823 61.8940  c
29.4751 61.8940 l
30.0024 61.8940 30.3723 61.8745 30.5847 61.8354  c
30.7971 61.7963 30.9887 61.7170 31.1596 61.5974  c
31.3305 61.4777 31.4794 61.3081 31.6064 61.0883  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
31.0000 9.00000 m
29.0000 9.00000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
newpath
25.7617 10.9580 m
26.0449 10.2890 26.4025 9.77270 26.8347 9.40893  c
27.2668 9.04516 27.8051 8.86328 28.4497 8.86328  c
29.2456 8.86328 29.8559 9.12207 30.2807 9.63964  c
30.6030 10.0253 30.7641 10.4379 30.7641 10.8774  c
30.7641 11.6001 30.3100 12.3471 29.4018 13.1186  c
30.0122 13.3579 30.4736 13.6997 30.7861 14.1440  c
31.0986 14.5883 31.2548 15.1108 31.2548 15.7114  c
31.2548 16.5708 30.9814 17.3154 30.4345 17.9453  c
29.7216 18.7656 28.6889 19.1757 27.3364 19.1757  c
26.6674 19.1757 26.2121 19.0927 25.9704 18.9267  c
25.7287 18.7607 25.6079 18.5825 25.6079 18.3920  c
25.6079 18.2504 25.6652 18.1259 25.7800 18.0185  c
25.8947 17.9111 26.0327 17.8574 26.1938 17.8574  c
26.3159 17.8574 26.4404 17.8769 26.5673 17.9160  c
26.6503 17.9404 26.8383 18.0295 27.1313 18.1833  c
27.4243 18.3371 27.6269 18.4287 27.7392 18.4580  c
27.9199 18.5117 28.1127 18.5385 28.3178 18.5385  c
28.8159 18.5385 29.2492 18.3457 29.6179 17.9599  c
29.9865 17.5742 30.1709 17.1176 30.1709 16.5903  c
30.1709 16.2045 30.0854 15.8286 29.9145 15.4624  c
29.7876 15.1889 29.6484 14.9814 29.4970 14.8398  c
29.2871 14.6445 28.9990 14.4675 28.6328 14.3088  c
28.2666 14.1501 27.8930 14.0708 27.5122 14.0708  c
27.2778 14.0708 l
27.2778 13.8510 l
27.6635 13.8022 28.0505 13.6630 28.4387 13.4335  c
28.8269 13.2041 29.1088 12.9282 29.2846 12.6059  c
29.4604 12.2836 29.5483 11.9296 29.5483 11.5439  c
29.5483 11.0410 29.3908 10.6345 29.0759 10.3244  c
28.7609 10.0144 28.3691 9.85937 27.9003 9.85937  c
27.1435 9.85937 26.5112 10.2646 26.0034 11.0752  c
h
f
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
31.0000 207.000 m
30.0000 207.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
31.0000 163.000 m
30.0000 163.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
31.0000 119.000 m
30.0000 119.000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
31.0000 75.0000 m
30.0000 75.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
q
0 w
newpath
31.0000 31.0000 m
30.0000 31.0000 l
S
[ 1.00000 0 0 1.00000 -5.00000 -5.00000 ] concat
[ 1.00000 0 0 1.00000 5.00000 5.00000 ] concat
Q
Q
2 J
0 j
Q
Q
cliprestore
0 0 248 248 rc
[ 1.00000 0 0 1.00000 0 0 ] concat
[ 1.00000 0 0 1.00000 0 0 ] concat
cliprestore
1.00000 w
2 J
0 j
end end restore showpage

%%Trailer
%%EOF
